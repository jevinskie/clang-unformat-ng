#include <clang/Format/Format.h>
#include <clang/Tooling/Inclusions/IncludeStyle.h>

#include <rfl.hpp>

namespace unformat {
namespace reflect {

/// Declarations

// Implementations

{#
{% for e in enums %}
enum class Rfl_{{e.type.cxx_name}};
{% endfor %}

{% for e in enums %}
enum class Rfl_{{e.type.cxx_name}};
{% endfor %}

{% for o in other %}
Rfl_{{o.type.cxx_name}} {{o.type.cxx_name}};
{% endfor %} #}

};
};

namespace rfl {
template <>
struct Reflector<clang::format::FormatStyle> {
  struct ReflType {
    {% for opt in opts %}
    {% if opt.type.cxx_qual %}{{opt.type.cxx_qual}}::{% endif %}{{opt.cxx_type}} {{opt.name}};
    {% endfor %}
  };

  static clang::format::FormatStyle to(const ReflType& v) noexcept {
    clang::format::FormatStyle s{};
    {# {% for opt in opts %}.{{opt.name}} = v.{{opt.name}},
    {% endfor %} #}
    {% for opt in opts %}s.{{opt.name}} = v.{{opt.name}};
    {% endfor %}
    return s;
  }

  static ReflType from(const clang::format::FormatStyle& v) {
    return {
        {% for opt in opts %}.{{opt.name}} = v.{{opt.name}},
        {% endfor %}
    };
  }
};
};

static_assert(((void)rfl::Reflector<clang::format::FormatStyle>{}, true), "materializable");
